Author: Łukasz Niedźwiadek
yytext              Token type      Token value as string

int                 KW_INT          
a                   IDENT           a
;                   ;               
======== FOUND: VAR 'a' ========
float               KW_FLOAT        
a1                  IDENT           a1
,                   ,               
======== FOUND: VAR 'a1' ========
_b                  IDENT           _b
,                   ,               
======== FOUND: VAR '_b' ========
_00                 IDENT           _00
;                   ;               
======== FOUND: VAR '_00' ========
double              KW_DOUBLE       
PI                  IDENT           PI
=                   =               
3.1415926           FLOAT_CONST     3.1415926
;                   ;               
======== FOUND: VAR 'PI' ========
unsigned            KW_UNSIGNED     
char                KW_CHAR         
c                   IDENT           c
;                   ;               
======== FOUND: VAR 'c' ========
int                 KW_INT          
fromASCII           IDENT           fromASCII
=                   =               
128                 INTEGER_CONST   128
,                   ,               
======== FOUND: VAR 'fromASCII' ========
toASCII             IDENT           toASCII
=                   =               
255                 INTEGER_CONST   255
;                   ;               
======== FOUND: VAR 'toASCII' ========
int                 KW_INT          
t                   IDENT           t
[                   [               
10                  INTEGER_CONST   10
]                   ]               
;                   ;               
======== FOUND: VAR 't' ========
struct              KW_STRUCT       
data                IDENT           data
{                   {               
int                 KW_INT          
rok                 IDENT           rok
;                   ;               
======== FOUND: VAR 'rok' ========
int                 KW_INT          
miesiac             IDENT           miesiac
,                   ,               
======== FOUND: VAR 'miesiac' ========
dzien               IDENT           dzien
;                   ;               
======== FOUND: VAR 'dzien' ========
}                   }               
d                   IDENT           d
;                   ;               
======== FOUND: VAR 'd' ========
void                KW_VOID         
FunkcjaPusta        IDENT           FunkcjaPusta
(                   (               
void                KW_VOID         
)                   )               
======== FOUND: FUN_HEAD 'FunkcjaPusta' ========
{                   {               
}                   }               
======== FOUND: BLOCK  ========
======== FOUND: S_FUNCTION 'FunkcjaPusta' ========
int                 KW_INT          
FunkcjaPustaZParametIDENT           FunkcjaPustaZParametrami
(                   (               
int                 KW_INT          
a                   IDENT           a
======== FOUND: FORM_PARAM 'a' ========
,                   ,               
double              KW_DOUBLE       
d                   IDENT           d
======== FOUND: FORM_PARAM 'd' ========
)                   )               
======== FOUND: FUN_HEAD 'FunkcjaPustaZParametrami' ========
{                   {               
}                   }               
======== FOUND: BLOCK  ========
======== FOUND: S_FUNCTION 'FunkcjaPustaZParametrami' ========
float               KW_FLOAT        
FunkcjaZDeklaracjamiIDENT           FunkcjaZDeklaracjamiZmiennych
(                   (               
double              KW_DOUBLE       
d                   IDENT           d
======== FOUND: FORM_PARAM 'd' ========
)                   )               
======== FOUND: FUN_HEAD 'FunkcjaZDeklaracjamiZmiennych' ========
{                   {               
int                 KW_INT          
a                   IDENT           a
;                   ;               
======== FOUND: VAR 'a' ========
======== FOUND: DECL_LIST  ========
double              KW_DOUBLE       
half                IDENT           half
=                   =               
.5                  FLOAT_CONST     .5
;                   ;               
======== FOUND: VAR 'half' ========
======== FOUND: DECL_LIST  ========
int                 KW_INT          
t                   IDENT           t
[                   [               
7                   INTEGER_CONST   7
]                   ]               
;                   ;               
======== FOUND: VAR 't' ========
======== FOUND: DECL_LIST  ========
struct              KW_STRUCT       
data                IDENT           data
{                   {               
int                 KW_INT          
rok                 IDENT           rok
,                   ,               
======== FOUND: VAR 'rok' ========
miesiac             IDENT           miesiac
;                   ;               
======== FOUND: VAR 'miesiac' ========
int                 KW_INT          
dzien               IDENT           dzien
;                   ;               
======== FOUND: VAR 'dzien' ========
}                   }               
d1                  IDENT           d1
;                   ;               
======== FOUND: VAR 'd1' ========
======== FOUND: DECL_LIST  ========
}                   }               
======== FOUND: BLOCK  ========
======== FOUND: S_FUNCTION 'FunkcjaZDeklaracjamiZmiennych' ========
int                 KW_INT          
x1                  IDENT           x1
=                   =               
fromASCII           IDENT           fromASCII
+                   +               
2                   INTEGER_CONST   2
*                   *               
(                   (               
20                  INTEGER_CONST   20
+                   +               
toASCII             IDENT           toASCII
)                   )               
;                   ;               
======== FOUND: VAR 'x1' ========
double              KW_DOUBLE       
realTest            IDENT           realTest
=                   =               
12.34               FLOAT_CONST     12.34
+                   +               
.56                 FLOAT_CONST     .56
+                   +               
78.                 FLOAT_CONST     78.
;                   ;               
======== FOUND: VAR 'realTest' ========
void                KW_VOID         
main                IDENT           main
(                   (               
void                KW_VOID         
)                   )               
======== FOUND: FUN_HEAD 'main' ========
{                   {               
int                 KW_INT          
a                   IDENT           a
=                   =               
1                   INTEGER_CONST   1
,                   ,               
======== FOUND: VAR 'a' ========
b                   IDENT           b
,                   ,               
======== FOUND: VAR 'b' ========
c                   IDENT           c
,                   ,               
======== FOUND: VAR 'c' ========
m                   IDENT           m
;                   ;               
======== FOUND: VAR 'm' ========
======== FOUND: DECL_LIST  ========
int                 KW_INT          
t                   IDENT           t
[                   [               
3                   INTEGER_CONST   3
]                   ]               
;                   ;               
======== FOUND: VAR 't' ========
======== FOUND: DECL_LIST  ========
struct              KW_STRUCT       
data                IDENT           data
{                   {               
int                 KW_INT          
dzien               IDENT           dzien
,                   ,               
======== FOUND: VAR 'dzien' ========
miesiac             IDENT           miesiac
,                   ,               
======== FOUND: VAR 'miesiac' ========
rok                 IDENT           rok
;                   ;               
======== FOUND: VAR 'rok' ========
}                   }               
d                   IDENT           d
;                   ;               
======== FOUND: VAR 'd' ========
======== FOUND: DECL_LIST  ========
FunkcjaPusta        IDENT           FunkcjaPusta
(                   (               
)                   )               
;                   ;               
======== FOUND: FUN_CALL 'FunkcjaPusta' ========
FunkcjaPustaZParametIDENT           FunkcjaPustaZParametrami
(                   (               
"x"                 STRING_CONST    "x"
======== FOUND: ACT_PARAM  ========
,                   ,               
123                 INTEGER_CONST   123
,                   ,               
======== FOUND: ACT_PARAM  ========
12.34               FLOAT_CONST     12.34
)                   )               
======== FOUND: ACT_PARAM  ========
;                   ;               
======== FOUND: FUN_CALL 'FunkcjaPustaZParametrami' ========
printf              IDENT           printf
(                   (               
"\n\n\nRozszerzone kSTRING_CONST    "\n\n\nRozszerzone kody ASCII\n\n"
======== FOUND: ACT_PARAM  ========
)                   )               
;                   ;               
======== FOUND: FUN_CALL 'printf' ========
for                 KW_FOR          
(                   (               
uc                  IDENT           uc
=                   =               
fromASCII           IDENT           fromASCII
;                   ;               
======== FOUND: ASSIGNMENT 'uc' ========
uc                  IDENT           uc
<=                  LE              
toASCII             IDENT           toASCII
;                   ;               
uc1                 IDENT           uc1
++                  INC             
======== FOUND: INCR 'uc1' ========
)                   )               
{                   {               
int                 KW_INT          
a                   IDENT           a
;                   ;               
======== FOUND: VAR 'a' ========
======== FOUND: DECL_LIST  ========
int                 KW_INT          
t                   IDENT           t
[                   [               
2                   INTEGER_CONST   2
]                   ]               
;                   ;               
======== FOUND: VAR 't' ========
======== FOUND: DECL_LIST  ========
t                   IDENT           t
[                   [               
0                   INTEGER_CONST   0
]                   ]               
=                   =               
1                   INTEGER_CONST   1
;                   ;               
======== FOUND: ASSIGNMENT 't' ========
t                   IDENT           t
[                   [               
1                   INTEGER_CONST   1
]                   ]               
=                   =               
t                   IDENT           t
[                   [               
0                   INTEGER_CONST   0
]                   ]               
;                   ;               
======== FOUND: ASSIGNMENT 't' ========
printf              IDENT           printf
(                   (               
"%3d:%2c"           STRING_CONST    "%3d:%2c"
======== FOUND: ACT_PARAM  ========
,                   ,               
uc                  IDENT           uc
,                   ,               
======== FOUND: ACT_PARAM  ========
uc                  IDENT           uc
)                   )               
======== FOUND: ACT_PARAM  ========
;                   ;               
======== FOUND: FUN_CALL 'printf' ========
printf              IDENT           printf
(                   (               
",%d\n"             STRING_CONST    ",%d\n"
======== FOUND: ACT_PARAM  ========
,                   ,               
t                   IDENT           t
[                   [               
1                   INTEGER_CONST   1
]                   ]               
)                   )               
======== FOUND: ACT_PARAM  ========
;                   ;               
======== FOUND: FUN_CALL 'printf' ========
d                   IDENT           d
.                   .               
dzien               IDENT           dzien
=                   =               
1                   INTEGER_CONST   1
;                   ;               
======== FOUND: ASSIGNMENT 'd' ========
}                   }               
======== FOUND: BLOCK  ========
======== FOUND: FOR_INSTR  ========
if                  KW_IF           
(                   (               
a                   IDENT           a
>                   >               
10                  INTEGER_CONST   10
)                   )               
b                   IDENT           b
=                   =               
a                   IDENT           a
;                   ;               
======== FOUND: ASSIGNMENT 'b' ========
======== FOUND: BLOCK  ========
if                  KW_IF           
======== FOUND: IF_INSTR  ========
(                   (               
a                   IDENT           a
>                   >               
1                   INTEGER_CONST   1
)                   )               
b                   IDENT           b
=                   =               
a                   IDENT           a
;                   ;               
======== FOUND: ASSIGNMENT 'b' ========
======== FOUND: BLOCK  ========
else                KW_ELSE         
b                   IDENT           b
=                   =               
1                   INTEGER_CONST   1
;                   ;               
======== FOUND: ASSIGNMENT 'b' ========
======== FOUND: BLOCK  ========
======== FOUND: IF_INSTR  ========
if                  KW_IF           
(                   (               
a                   IDENT           a
>                   >               
b                   IDENT           b
)                   )               
if                  KW_IF           
(                   (               
a                   IDENT           a
>                   >               
c                   IDENT           c
)                   )               
m                   IDENT           m
=                   =               
a                   IDENT           a
;                   ;               
======== FOUND: ASSIGNMENT 'm' ========
======== FOUND: BLOCK  ========
else                KW_ELSE         
m                   IDENT           m
=                   =               
c                   IDENT           c
;                   ;               
======== FOUND: ASSIGNMENT 'm' ========
======== FOUND: BLOCK  ========
======== FOUND: IF_INSTR  ========
======== FOUND: BLOCK  ========
else                KW_ELSE         
if                  KW_IF           
(                   (               
b                   IDENT           b
>                   >               
c                   IDENT           c
)                   )               
m                   IDENT           m
=                   =               
b                   IDENT           b
;                   ;               
======== FOUND: ASSIGNMENT 'm' ========
======== FOUND: BLOCK  ========
else                KW_ELSE         
m                   IDENT           m
=                   =               
c                   IDENT           c
;                   ;               
======== FOUND: ASSIGNMENT 'm' ========
======== FOUND: BLOCK  ========
======== FOUND: IF_INSTR  ========
======== FOUND: BLOCK  ========
======== FOUND: IF_INSTR  ========
while               KW_WHILE        
(                   (               
a                   IDENT           a
>                   >               
1                   INTEGER_CONST   1
)                   )               
a                   IDENT           a
=                   =               
a                   IDENT           a
-                   -               
2                   INTEGER_CONST   2
;                   ;               
======== FOUND: ASSIGNMENT 'a' ========
======== FOUND: BLOCK  ========
======== FOUND: WHILE_INSTR  ========
d                   IDENT           d
.                   .               
rok                 IDENT           rok
=                   =               
2010                INTEGER_CONST   2010
;                   ;               
======== FOUND: ASSIGNMENT 'd' ========
do                  KW_DO           
{                   {               
a                   IDENT           a
++                  INC             
======== FOUND: INCR 'a' ========
;                   ;               
d                   IDENT           d
.                   .               
rok                 IDENT           rok
++                  INC             
======== FOUND: INCR 'd' ========
;                   ;               
}                   }               
======== FOUND: BLOCK  ========
while               KW_WHILE        
(                   (               
a                   IDENT           a
<                   <               
1                   INTEGER_CONST   1
)                   )               
;                   ;               
======== FOUND: DO_WHILE  ========
m                   IDENT           m
=                   =               
a                   IDENT           a
>                   >               
b                   IDENT           b
?                   ?               
(                   (               
a                   IDENT           a
>                   >               
c                   IDENT           c
?                   ?               
a                   IDENT           a
:                   :               
c                   IDENT           c
)                   )               
======== FOUND: COND_EXPR  ========
:                   :               
(                   (               
b                   IDENT           b
>                   >               
c                   IDENT           c
?                   ?               
b                   IDENT           b
:                   :               
c                   IDENT           c
)                   )               
======== FOUND: COND_EXPR  ========
;                   ;               
======== FOUND: COND_EXPR  ========
======== FOUND: ASSIGNMENT 'm' ========
}                   }               
======== FOUND: BLOCK  ========
======== FOUND: S_FUNCTION 'main' ========
